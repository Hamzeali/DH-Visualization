{
    "language": "English",
    "skip": "Skip intro",
    "reset": "Restart intro",
    "errorTitel": "Error",
    "primeNumberErrorMessage": "p must be prime number!",
    "primitiveRootErrorMessage": "g must be primitive root of p!",
    "emptyErrorMessage": "Empty values are not accepted!",
    "doneTitel": "Done",
    "correctMessage": "The values have been set.",
    "settings": "Settings",
    "animationSpeed": "Animation speed",
    "appLanguage": "Language",
    "zoomEnable": "Enable zoom",
    "secretBob": "Secret (Bob)",
    "secretAlice": "Secret (Alice)",
    "cancel": "Cancel",
    "introStart": "Start the Introduction",
    "aliceIntro": "Hi! I am Alice.",
    "bobIntro": "And I am Bob.",
    "eveIntro": "And here is Eve.",
    "appDesc0": "We (Alice and Bob) would like to communicate securely with each other and we want to use symmetric encryption (e.g. AES) to do so.",
    "appDesc1": "In this app we will explain to you how DHKE (Diffie-Hellman key-exchange) works.",
    "appDesc2": "The application consists of 4 scenes.",
    "firstScene": "The first scene explains the basic idea of DHKE using colors.",
    "secondScene": "The second scene explains some mathematical principles about one-way functions, primitive roots, and the discrete logarithm problem. You can also skip the first two scenes and go straight to scene 3.",
    "thirdScene": "The third scene explains DHKE with numbers, where you can use your own numerical values as well :)",
    "fourthScene": "The fourth scene shows how a MitM attack on DHKE can be done (MitM = man-in-the-middle).",
    "sceneStart1": "So let's start the scenes...",

    "secret": "Secret ",

    "toolTipRightBtn": "Next step",
    "toolTipLeftBtn": "Previous step",
    "toolTipMoreBtn": "More",
    "toolTipPlayBtn": "Play",
    "toolTipResetBtn": "Reset",
    "toolTipSettingsBtn": "Settings",
    "toolTipDescBtn": "Show description",

    "ref": "References",
    "wiki": "Diffie–Hellman key exchange: ",
    "url": "https://en.wikipedia.org/wiki/Diffie–Hellman_key_exchange",

    "about0": "What is DHKE?",
    "about1": "- Purpose of the Diffie-Hellman key-exchange protocol",
    "about2": "Diffie-Hellman (DH for short) is a protocol that allows two parties to communicate securely with each other over an insecure channel (such as the internet). The main idea of DH is about using (asymmetric) keys and to establish a common key between the two parties, which then can be used for symmetric encryption. DH is no new protocol: It was invented by Whitfield Diffie and Martin Hellman in Stanford in 1976. DH can generate the secret key but cannot encrypt or decrypt messages. In the next section we will see in detail how this protocol works.",
    "about3": "- The Diffie-Hellman protocol",
    "about4": "Scenario: Alice and Bob want to communicate securely using a symmetric encryption scheme (and they have no PKI available). They are connected over an unsecured line and have not yet exchanged a key (so there is no information they share in advance).",
    "about5": "The DH protocol makes it possible to establish a secret shared key between two parties – over the unsecured line. The security is based on the difficulty of the discrete logarithm problem.",
    "about6": "Alice and Bob use a one-way function to obtain a secret key S. This session key S can be used, for example, as a key in a symmetrical procedure such as AES for subsequent correspondence. This session key is only known to the two parties. How does the protocol work: Alice selects a random number 'a' and keeps it secret. She applies a one-way function to a to calculate the number A = g^a and sends it to Bob. He does the same, by selecting a secret random number 'b', calculating B = g^b and sending it to Alice. The number g is random and can be publicly known. Alice applies the one-way function together with her secret number a to B, while Bob does the same with his secret number b and the received number A.",
    "about7": "The result S is the same in each case because the one-way function is commutative: (g^a)^b = (g^b)^a. But even Bob cannot reconstruct Alice’s secret number a from the data available to him. And Alice cannot determine Bob’s secret number b. An eaves-dropper (Eve) who knows g and has intercepted both A and B cannot use this knowledge to determine a, b, or S.",
    "about8": "Procedure:",
    "about9": "Alice and Bob want to negotiate a secret session key S via a channel that may be intercepted.",
    "about10": "1. They select a prime number p and a random number g (with 2 ≤ g ≤ p−2) and exchange this information openly.",
    "about11": "2. Alice now selects a random number a from {1,···,p−2}, and keeps it secret. Similarly, Bob selects a random number b, and keeps it secret.",
    "about12": "3. Alice now calculates A = g^a (mod p).",
    "about13": "Bob calculates A = g^b (mod p).",
    "about14": "4. Alice sends the result A to Bob. Bob sends the result B to Alice.",
    "about15": "So A and B can be considered public.",
    "about16": "5. In order to determine the session key to be used by both parties, both separately calculate the following power modulo p:",
    "about17": "Alice calculates S = B^a (mod p) and",
    "about18": "Bob calculates S = A^b (mod p).",
    "about19": "Even if a spy (Eve) intercepts g, p, and the interim results A and B, she cannot use these in order to determine the session key used – due to the difficulty of calculating the discrete logarithm a = log(A).",
    "about20": "The DH problem and the man-in-the-middle",
    "about21": "Although the DHKE is considered to be one of the practical ways of generating a common secret key between two communicating parties, the basic Diffie-Hellman protocol is susceptible to a man-in-the-middle attack because it does not authenticate the communicating parties. The attacker can block the communication between the sender and the receiver and then take the role of the particular second party. In this scenario the attacker can get the public keys of each party and generate his own ones. Then a communication will be established between the attacker and the sender and another communication between the attacker and the receiver where each of the original communicating parties thinks he/she is communicating with the real partner. In this way the attacker can easily decrypt the secret message which has encrypted with these generated key.",

    "introduction": "Introduction",
    "intro0": "- What is primitive root modulo a prime number?",
    "intro1": "• A primitive root ",
    "intro2": " is a definite element of a prime residue class group with modulo ",
    "intro3": ". Any element can be generated by exponentiating a primitive root ",
    "intro4": ".",
    "intro5": " modulo ",
    "intro6": "• In other words we can call ",
    "intro7": " primitive root of the prime number ",
    "intro8": " if ",
    "intro9": " are distinct.",
    "intro10": "-> Example: ",
    "intro11": "Let's assume that, ",
    "intro12": " and ",
    "intro13": "   After calculating the modulus, we get:",
    "intro14": "    As we see, all results are ",
    "intro15": "dstinct",
    "intro16": ", so we can say that ",
    "intro17": " is a primitive root of the prime number",
    "intro18": "",
    "intro19": "- Discrete logarithm problem",
    "intro20": "In a finite group, the power (exponential function) y=b^x modulo p is easy to compute. The inverse x=log(b,y) is called the discrete logarithm. The discrete logarithm is difficult to calculate in a finite group. Thus, the exponential function is a one-way function (easy to calculate in one direction, hard in the other direction).",
    "intro21": "exponential function",
    "intro22": " is a ",
    "intro23": "one-way function.",
    "intro24": " • But what is one-way function?",
    "intro25": "   -> Assuming that we have data",
    "intro26": ". it is easy to calculate",
    "intro27": ". But it is very difficult to compute its inverse function.",
    "intro28": "Let's take: ",
    "intro29": "   Computing ",
    "intro30": " is easy, but when we want to compute the inverse function, it will be really hard.",
    "intro31": " In other words, if we have ",
    "intro32": ", it will be very hard to know the value of ",
    "intro33": ". Where ",
    "intro34": " can be ",
    "intro35": "etc",

    "intro36": "- What is a generator?",
    "intro37": "A generator g of a group is an element that can be used to generate every other element in the group through repeated application of the group operation. In the case of a group of integers modulo a prime number p, the generator is raised to all possible powers from 1 to p-1, and these powers take all values of the other elements of the group (unequal zero) exactly once.",
    "intro38": "- Scenario of the scene",
    "intro39": "This scene considers the multiplicative group modulo the prime p = 17. The group contains as elements all numbers from 1 to 16. As generator we choose g = 3. Then we can  generate with the power g^i modulo p all elements of the group. The exponent i runs through all values from 1 to 16.",

    "dhke": "What is DHKE?",
    "readDHKE": "Read about DHKE?",
    "yes": "Yes",
    "no": "No",
    "suggestRoot": "Suggest root",

    "showCase0": "Go one step forward.",
    "showCase1": "Go one step backward.",
    "showCase2": "Show or hide the description box.",
    "showCase3": "Change the settings of the application.",
    "showCase4": "Reset the scene and start again.",
    "showCase5": "Let the app run in automatic mode.",
    "showCase6": "It has three buttons inside.",
    "showCase7": "Step number. Each scene consists of several steps. You can also set this number directly",
    "showCase8": "In this box you will see some explanations about what happens on the screen. You can maximize or minimize the box pressing long.",

    "outOfRangeError": "Please enter a valid number.",
    "goToStep": "Go to step number:",

    "aboutApp": "About...",
    "aboutApp1": "The Flutter app 'DHKE' was developed in the course of a bachelor thesis by ",
    "ali": "https://www.linkedin.com/in/hamze-ali-65b000207/",
    "aboutApp2": " for the CrypTool project.",
    "aboutApp3": "(C) 2023, freeware, open source (Apache 2), CrypTool (",
    "aboutApp4": "https://www.cryptool.org",
    "aboutApp5": "Last modification / built:  22.03.2023",

    "lastLeft": "Beginning of the scene!",
    "lastLeft2": "Beginning of the scene! Do you want to switch to the previous scene?",
    "lastRight": "End of the scene! Do you want to switch to the next scene?",
    "lastRight2": "End of the scene! Do you want to go back to the first scene?",

    "sceneStart2": "Start the scenes",
    "slide1": "Basic idea of DHKE",
    "slide2": "Some mathematical basics",
    "slide3": "How does the DHKE protocol work?",
    "slide4": "MitM attack on DHKE",
    "text1": "Color mixing is a simple analogy used to illustrate the Diffie-Hellman key exchange (DHKE) protocol.\nThe aim is, that Alice and Bob agree on a secret color. And in scene 3, we’ll see how it works with numbers.",
    "text2": "Choosing a prime number p and a generator g.\n",
    "prevOp": "Previous operation: ",
    "newOp": "New operation: ",
    "text31": "This time with numbers – with small numbers. In practice, DHKE uses large numbers (p > 3000 bit according to BSI recommendations)",
    "text321": "Alice chooses a prime number. Let’s say she chooses p = ",
    "text322": "and as generator g = ",
    "text4": "Man-in-the-middle attack on DHKE: Eve blocks the key exchange between Alice and Bob.",
    "slide1Item0": "Alice thinks up her first color (yellow).",
    "slide1Item1": "When Alice sends Bob her first color (which is the 'generator' in the real protocol), Eve can listen and so she also knows this color.",
    "slide1Item2": "Now both think up of another (secret) color:  Alice selects red and Bob selects turquoise.",
    "slide1Item3": " Alice and Bob mix Alice's first color (yellow) with the color, they respectively thought about the second time. Now, Alice and Bob both have a mixed color (Alice has orange, Bob has blue).",
    "slide1Item4": "Alice sends her mixed color (orange) to Bob, and Bob sends his mixed color (blue) to Alice. Eve can know the mixed color of both, but not the their secret colors (red and turquoise).",
    "slide1Item5": "Alice mixes Bob's mixed color (blue) with her secret color (red). Bob does the same: He mixes Alice's mixed color (orange) with his second color (blue).",
    "slide1Item6": "Now, Alice and Bob have the same result color (dark green), of which Eve has no idea. Transferred to the upcoming DHKE, Alice and Bob now share a secret (the result color) of which Eve has no clue about, although she was able to record everything the both communicated about.",
    "slide3Item0": "Alice chooses a large prime number p and a generator g. Here we will use only small numbers for clarification.",
    "slide3Item1": "Alice sends p and g to Bob. So Eve will know the selected numbers.",
    "slide3Item2": "Alice selects her secret number 'a'. Bob also selects his secret number 'b'. The secret numbers (private keys) will not be exchanged!",
    "slide3Item3": "Now Alice and Bob generate their public key ('A' for Alice and 'B' for Bob) with the help of the formula shown on the screen.",
    "slide3Item4": "Alice and Bob exchange the values of their public keys (A and B). Again, Eve can intercept these two values.",
    "slide3Item5": "Now, Alice and Bob generate the shared secret key S – using the formulas shown on the screen. This means that they have a shared secret. They now can use this secret number as a session key for a symmetric encryption.",
    "slide4Item0": "Alice selects her secret number a.",
    "slide4Item1": "Alice generates her public key A with the help of the formula shown on the screen.",
    "slide4Item2": "Now Alice wants to share her public key A with Bob. Eve blocks the transmission of Alice's public key and keeps it for herself without Alice or Bob noticing that.",
    "slide4Item3": "Eve selects her first secret number e1.",
    "slide4Item4": "Eve generates her public key EA with the help of the formula shown on the screen.",
    "slide4Item5": "Now Eve shares her public key EA with Alice. Alice thinks that this public key is coming from Bob.",
    "slide4Item6": "Now Alice and Eve generate the secret key S1 with the help of the formulas shown on the screen.",
    "slide4Item7": "Bob selects his secret number b.",
    "slide4Item8": "Bob generates his public key B with the help of the formula that's shown on the screen.",
    "slide4Item9": "Now Bob wants to share his public key B with Alice. Eve blocks the transmission of Bob's public key and keeps it for herself without letting Alice or Bob notice that.",
    "slide4Item10": "Eve selects her second secret number e2.",
    "slide4Item11": "Eve generates her public key EB with the help of the formula shown on the screen.",
    "slide4Item12": "Now Eve shares her public key EB with Bob. Bob thinks that this public key is coming from Alice.",
    "slide4Item13": "Now Bob and Eve generate the secret key S2 with the help of the formulas shown on the screen.",
    "slide4Item14": "If Eve manages to continue to stop direct communication between Alice and Bob, and channel it through her, she will be able to read all communication.",
    "slide4Item15": "Now we show how a simple DHKE can be attacked."
}
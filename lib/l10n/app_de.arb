{
    "language": "Deutsch",
    "skip": "Einführung überspringen",
    "reset": "Einführung neu starten",
    "errorTitel": "Fehler",
    "primeNumberErrorMessage": "p muss eine Primzahl sein!",
    "primitiveRootErrorMessage": "g muss eine Primitivwurzel von p sein!",
    "emptyErrorMessage": "Leere Werte sind nicht erlaubt.",
    "doneTitel": "Erledigt",
    "correctMessage": "Die Werte sind gesetzt.",
    "settings": "Einstellungen",
    "animationSpeed": "Animations-Geschwindigkeit",
    "appLanguage": "Sprache ",
    "zoomEnable": "Zoom aktivieren",
    "secretBob": "Geheim (Bob)",
    "secretAlice": "Geheim (Alice)",
    "cancel": "Abbrechen",
    "introStart": "Starten Sie die Einführung",
    "aliceIntro": "Hi! Ich bin Alice.",
    "bobIntro": "Und ich bin Bob.",
    "eveIntro": "Und hier ist Eve.",
    "appDesc0": "Wir (Alice und Bob) möchten sicher miteinander kommunizieren, und wir wollen dazu symmetrische Verschlüsselung (bspw. AES) benutzen.",
    "appDesc1": "In dieser App erklären wir Ihnen, wie DHKE (das Diffie-Hellman-Schlüsselaustausch-Verfahren) funktioniert.",
    "appDesc2": "Die Anwendung besteht aus 4 Szenen.",
    "firstScene": "Die erste Szene erklärt Ihnen die Grundidee von DHKE unter Verwendung von Farben.",
    "secondScene": "Die zweite Szene erläutert einige mathematische Grundlagen über Einwegfunktionen, Primitivwurzeln und das Problem des diskreten Logarithmus. Die beiden ersten Szenen können Sie auch überspringen und gleich zu Szene 3 gehen.",
    "thirdScene": "Die dritte Szene erklärt DHKE mit Zahlen, wobei Sie auch eigene Zahlenwerte verwenden können :)",
    "fourthScene": "Die vierte Szene zeigt Ihnen, wie ein MitM-Angriff auf DHKE ausgeführt werden kann (MitM = Man-in-the-Middle).",
    "sceneStart1": "Beginnen wir also mit den Szenen...",
    "sceneStart2": "Szenen starten",

    "secret": "Geheimzahl ",
    "possibleRoots": "Primitive Wurzeln mod p:",

    "toolTipRightBtn": "Nächster Schritt",
    "toolTipLeftBtn": "Vorheriger Schritt",
    "toolTipMoreBtn": "Mehr",
    "toolTipPlayBtn": "Abspielen",
    "toolTipResetBtn": "Zurücksetzen",
    "toolTipSettingsBtn": "Einstellungen",
    "toolTipDescBtn": "Beschreibung anzeigen",

    "ref": "Referenzen",
    "wiki": "Diffie-Hellman-Schlüsselaustausch: ",
    "url": "https://de.wikipedia.org/wiki/Diffie-Hellman-Schlüsselaustausch",

    "about0": "Was ist DHKE?",
    "about1": "- Zweck des Diffie-Hellman Key-Exchange-Protokolls",
    "about2": "Diffie-Hellman (kurz DH) ist ein Protokoll, das es zwei Parteien ermöglicht, über einen unsicheren Kanal (wie das Internet) sicher miteinander zu kommunizieren. Die Hauptidee von DH besteht darin, (asymmetrische) Schlüssel zu nutzen und zwischen zwei Parteien einen gemeinsamen Schlüssel zu etablieren, der dann zur symmetrischen Verschlüsselung verwendet werden kann. DH ist kein neues Protokoll: Es wurde 1976 von Whitfield Diffie und Martin Hellman in Stanford erfunden. DH kann den geheimen Schlüssel generieren, aber keine Nachrichten verschlüsseln oder entschlüsseln. Im nächsten Abschnitt werden wir im Detail sehen, wie dieses Protokoll funktioniert.",
    "about3": "- Das Diffie-Hellman-Protokoll",
    "about4": "Szenario: Alice und Bob wollen sicher mit einem symmetrischen Verschlüsselungsverfahren kommunizieren (und haben keine PKI zur Verfügung). Sie sind über eine ungesicherte Leitung verbunden und haben noch keinen Schlüssel ausgetauscht (es gibt also keine Informationen, die sie im voraus teilen).",
    "about5": "Das DH-Protokoll ermöglicht es, einen geheimen gemeinsamen Schlüssel zwischen zwei Parteien zu erstellen – über die ungesicherte Leitung. Die Sicherheit beruht auf der Schwierigkeit des Problems des diskreten Logarithmus.",
    "about6": "Alice und Bob verwenden eine Einwegfunktion, um einen geheimen Schlüssel S zu erhalten. Dieser Sitzungsschlüssel (session key) kann z.B. als Schlüssel in einem symmetrischen Verfahren wie AES für die spätere Korrespondenz verwendet werden. Dieser Sitzungsschlüssel ist nur den beiden Parteien bekannt. Wie funktioniert das Protokoll: Alice wählt eine Zufallszahl 'a' und hält sie geheim. Sie wendet dann eine Einwegfunktion auf a an, um die Zahl A = g^a zu berechnen und sendet sie an Bob. Er tut dasselbe, indem er eine geheime Zufallszahl 'b' wählt, B = g^b berechnet und sie an Alice sendet. Die Zahl g ist zufällig und kann öffentlich bekannt sein. Alice wendet die Einwegfunktion zusammen mit ihrer Geheimzahl a auf B an, während Bob dasselbe mit seiner Geheimzahl b und der empfangenen Zahl A tut.",
    "about7": "Das Ergebnis S ist in jedem Fall dasselbe, da die Einwegfunktion kommutativ ist: (g^a)^b = (g^b)^a. Aber auch Bob kann Alices Geheimzahl a nicht aus den ihm zur Verfügung stehenden Daten rekonstruieren. Umgekehrt kann auch Alice Bobs Geheimzahl b nicht ermitteln. Und ein Lauscher (Eve), der g kennt und sowohl A als auch B abgehört hat, kann dieses Wissen nicht nutzen, um a, b oder S zu ermitteln.",
    "about8": "Verfahren:",
    "about9": "Alice und Bob wollen einen geheimen Sitzungsschlüssel S über einen Kanal aushandeln, der abgehört werden kann.",
    "about10": "1. Sie wählen eine Primzahl p und eine Zufallszahl g (mit 2 ≤ g ≤ p-2) und tauschen diese Informationen offen aus.",
    "about11": "2. Alice wählt nun eine Zufallszahl a aus 1,...,p-2, und hält sie geheim. Analog dazu wählt Bob eine Zufallszahl b und hält sie geheim.",
    "about12": "3. Alice berechnet nun A = g^a (mod p).",
    "about13": "Bob berechnet B = g^b (mod p).",
    "about14": "4. Alice sendet das Ergebnis A an Bob. Bob sendet das Ergebnis B an Alice.",
    "about15": "A und B können also als öffentlich angesehen werden.",
    "about16": "5. Um den von beiden Parteien zu verwendenden Sitzungsschlüssel zu ermitteln, berechnen beide Parteien getrennt voneinander die ff. Potenz modulo p:",
    "about17": "Alice berechnet S = B^a (mod p) und",
    "about18": "Bob berechnet S = A^b (mod p).",
    "about19": "Selbst wenn ein Spion (Eve) g, p und die Zwischenergebnisse A und B abfängt, kann er diese nicht verwenden, um den verwendeten Sitzungsschlüssel zu ermitteln - aufgrund der Schwierigkeit, den diskreten Logarithmus a = log(A) zu berechnen.",
    "about20": "Das DH-Problem und der Man-in-the-Middle",
    "about21": "Obwohl das DHKE-Protokoll als eine der praktischsten Methoden zur Erzeugung eines gemeinsamen geheimen Schlüssels zwischen zwei kommunizierenden Parteien gilt, ist das grundlegende Diffie-Hellman-Protokoll anfällig für einen Man-in-the-Middle-Angriff, da es die kommunizierenden Parteien nicht authentifiziert. Der Angreifer kann die Kommunikation zwischen dem Sender und dem Empfänger blockieren und dann die Rolle des jeweiligen Kommunikationspartners übernehmen. In diesem Szenario kann der Angreifer die öffentlichen Schlüssel der beiden Parteien erhalten und seine eigenen generieren. Dann wird eine Kommunikation zwischen dem Angreifer und dem Absender und eine weitere Kommunikation zwischen dem Angreifer und dem Empfänger aufgebaut, wobei jede der rsprünglichen kommunizierenden Parteien denkt, dass sie mit dem echten Partner kommuniziert. Auf diese Weise kann der Angreifer die geheime Nachricht, die mit diesen generierten Schlüsseln verschlüsselt wurde, leicht entschlüsseln.",

    "introduction": "Einführung",
    "intro0": "- Was ist die Primitivwurzel modulo einer Primzahl?",
    "intro1": "• Eine Primitivwurzel ",
    "intro2": " ist eine bestimmte Element einer primen Restklassengruppe mit Modulo ",
    "intro3": ". Mittels potenzieren einer Primitivwurzel ",
    "intro4": " jedes Element erzeugt werden kann.",
    "intro5": " modulo ",
    "intro6": "• Mit anderen Worten können wir ",
    "intro7": " Primitivwurzel der Primzahl ",
    "intro8": " nennen, wenn ",
    "intro9": " verschieden sind.",
    "intro10": "-> Beispiel: ",
    "intro11": "Nehmen wir an, ",
    "intro12": " und ",
    "intro13": "   Nach Berechnung des Moduls erhalten wir:",
    "intro14": "    Wie wir sehen, sind alle Ergebnisse ",
    "intro15": "verschieden",
    "intro16": ", also können wir sagen, dass ",
    "intro17": " eine primitive Wurzel der Primzahl ",
    "intro18": " ist",
    "intro19": "- Problem des diskreten Logarithmus",
    "intro20": " In einer endlichen Gruppe ist die Potenz (Exponentialfunktion) y=b^x modulo p einfach zu berechnen. Die Umkehrung x=log(b,y) nennt sich der diskrete Logarithmus. Er ist in einer endlichen Gruppe schwer zu berechnen. Somit ist die Exponentialfunktion eine Einwegfunktion (eine Richtung leicht, eine sehr schwer).",
    "intro21": "Exponentialfunktion",
    "intro22": " ist also eine ",
    "intro23": "Einwegfunktion.",
    "intro24": " • Aber was ist eine Einwegfunktion?",
    "intro25": "   -> Angenommen, wir haben Daten",
    "intro26": ". es ist einfach ",
    "intro27": " zu berechnen. Aber es ist sehr schwierig, ihre Umkehrfunktion zu berechnen.",
    "intro28": "Nehmen wir an: ",
    "intro29": "   ",
    "intro30": " zu berechnen ist einfach, aber wenn wir die Umkehrfunktion berechnen wollen, wird es wirklich schwierig.",
    "intro31": " Mit anderen Worten, wenn wir ",
    "intro32": " haben, wird es sehr schwierig sein, den Wert von ",
    "intro33": " zu bestimmen. wobei ",
    "intro34": " könnte ",
    "intro35": "usw sein",

    "intro36": "- Was ist ein Erzeuger?",
    "intro37": "Ein Erzeuger g einer Gruppe ist ein Element, aus dem durch wiederholte Anwendung der Gruppenoperation jedes andere Element der Gruppe erzeugt werden kann. Im Fall einer Gruppe ganzer Zahlen modulo einer Primzahl p werden vom Erzeuger alle möglichen Potenzen hoch 1 bis p-1 gebildet, und diese Potenzen nehmen alle Werte der anderen Elemente der Gruppe genau einmal an.",
    "intro38": "- Szenario der Szene",
    "intro39": "Diese Szene betrachtet die multiplikative Gruppe modulo der Primzahl p = 17. Die Gruppe enthält als Elemente alle Zahlen von 1 bis 16. Als Erzeuger wählen wir g = 3. Dann kann man mit der Potenz g^i modulo p alle Elemente der Gruppe erzeugen. Der Exponent i durchläuft alle Werte von 1 bis 16.",

    "dhke": "Was ist DHKE?",
    "readDHKE": "Lesen Sie mehr über DHKE?",
    "yes": "Ja",
    "no": "Nein",
    "suggestRoot": "Wurzel vorschlagen",

    "showCase0": "Gehen Sie einen Schritt nach vorne.",
    "showCase1": "Gehen Sie einen Schritt zurück.",
    "showCase2": "Blenden Sie das Beschreibungsfeld ein oder aus.",
    "showCase3": "Ändern Sie die Einstellungen der Anwendung.",
    "showCase4": "Setzen Sie die Szene zurück und beginnen Sie von vorne.",
    "showCase5": "Lassen Sie die App im automatischen Modus laufen.",
    "showCase6": "Darin befinden sich drei Knöpfe.",
    "showCase7": "Schrittnummer. Jede Szene besteht aus mehreren Schritten. Sie können die Schrittnummer auch direkt eingeben.",
    "showCase8": "In diesem Feld sehen Sie Erklärungen dazu, was auf dem Bildschirm passiert (das Feld können Sie durch langes Drücken maximieren oder minimieren).",

    "outOfRangeError": "Bitte geben Sie eine gültige Nummer ein.",
    "goToStep": "Gehen Sie zu Schrittnummer:",

    "aboutApp": "Über...",
    "aboutApp1": "Die Flutter-App 'DHKE' wurde im Zuge einer Bachelorarbeit von ",
    "ali": "https://www.linkedin.com/in/hamze-ali-65b000207/",
    "aboutApp2": " für das CrypTool-Projekt entwickelt.",
    "aboutApp3": "(C) 2023, Freeware, Open-Source (gemäß Apache 2), CrypTool (",
    "aboutApp4": "https://www.cryptool.org",
    "aboutApp5": "Letzte Änderung / Built:  22.03.2023",

    "lastLeft": "Anfang der Szene!",
    "lastLeft2": "Anfang der Szene! Möchten Sie zur vorherigen Szene wechseln?",
    "lastRight": "Ende der Szene! Möchten Sie zur nächsten Szene wechseln?",
    "lastRight2": "Ende der Szene! Möchten Sie zur ersten Szene zurückkehren?",

    "slide1": "Grundlegende Idee des DHKE",
    "slide2": "Mathematische Grundlagen",
    "slide3": "Wie funktioniert das DHKE-Protokoll?",
    "slide4": "MitM-Angriff auf DHKE",
    "text1": "Farbmischungen sind eine einfache Analogie, mit der man das Diffie-Hellman Schlüsselaustausch-Protokoll (DHKE) veranschaulichen kann.\nZiel ist es, dass Alice und Bob sich auf eine geheime Farbe einigen. Und in Szene 3 sehen wir dann, wie es mit Zahlen funktioniert.",
    "text2": "Wahl einer Primzahl p und eines Erzeugers g.\n",
    "prevOp": "Vorherige Operation: ",
    "newOp": "Neue Operation: ",
    "text31": "Diesmal mit Zahlen – mit kleinen Zahlen. In der Praxis verwendet DHKE große Zahlen (p > 3000 bit laut BSI-Empfehlung).",
    "text321": "Alice wählt eine Primzahl. Nehmen wir an, sie wählt p = ",
    "text322": "und als Erzeuger g = ",
    "text4": "Man-in-the-Middle-Angriff auf DHKE: Eve blockiert den Schlüsselaustausch zwischen Alice und Bob.",
    "slide1Item0": "Alice denkt sich ihre erste Farbe (gelb) aus.",
    "slide1Item1": "Als Alice Bob die erste Farbe schickt (die im echten Protokoll der 'Erzeuger' ist), kann Eve zuhören und kennt so diese Farbe auch.",
    "slide1Item2": "Nun denken sich beide noch eine weitere (geheime) Farbe aus: Alice wählt rot und Bob wählt türkis.",
    "slide1Item3": "Alice und Bob mischen die erste Farbe von Alice (gelb) jeweils mit der Farbe, die sie sich als Zweites ausdachten. Jetzt haben Alice und Bob jeweils eine Mischfarbe (Alice hat orange, Bob hat blau).",
    "slide1Item4": "Alice sendet ihre Mischfarbe (orange) an Bob, und Bob sendet seine Mischfarbe (blau) an Alice. Eve kennt nun auch die Mischfarbe von beiden, aber nicht die geheimen Farben (rot und türkis).",
    "slide1Item5": "Alice mischt Bobs Mischfarbe (blau) mit ihrer geheimen Farbe (rot). Bob macht dasselbe: Er mischt Alices Mischfarbe (orange) mit seiner zweiten Farbe (türkis).",
    "slide1Item6": "Jetzt haben Alice und Bob die gleiche Ergebnisfarbe (dunkelgrün), von der Eve keine Ahnung hat. Übertragen auf das kommende DHKE teilen Alice und Bob nun ein Geheimnis (die Ergebnisfarbe), von dem Eve keine Ahnung hat, obwohl sie alles mitschneiden konnte, worüber die beiden kommunizierten.",
    "slide3Item0": "Alice wählt eine große Primzahl p und einen Erzeuger g. Hier nutzen wir zur Verdeutlichung nur kleine Zahlen.",
    "slide3Item1": "Alice sendet p und g an Bob. Eve kennt damit die ausgewählten Zahlen.",
    "slide3Item2": "Alice wählt ihre Geheimzahl 'a'. Auch Bob wählt seine Geheimzahl 'b' aus. Die Geheimzahlen (private Schlüssel) werden nicht ausgetauscht!",
    "slide3Item3": "Jetzt generieren Alice und Bob ihren öffentlichen Schlüssel ('A' für Alice und 'B' für Bob) mit Hilfe der Formel, die auf dem Bildschirm zu sehen ist.",
    "slide3Item4": "Alice und Bob tauschen die Werte ihrer öffentlichen Schlüssel (A und B) aus. Wieder kann Eve diese beiden Werte abhören.",
    "slide3Item5": "Jetzt generieren Alice und Bob den gemeinsamen geheimen Schlüssel S – mit den auf dem Bildschirm angezeigten Formeln. Damit haben sie ein gemeinsames Geheimnis. Diese geheime Zahl können sie nun als Schlüssel (Sessionkey) für eine symmetrische Verschlüsselung verwenden.",
    "slide4Item0": "Alice wählt ihre Geheimzahl a.",
    "slide4Item1": "Alice generiert ihren öffentlichen Schlüssel A mit Hilfe der Formel, die auf dem Bildschirm angezeigt wird.",
    "slide4Item2": "Jetzt will Alice ihren öffentlichen Schlüssel A mit Bob teilen. Eve blockiert die Übertragung von Alices öffentlichem Schlüssel und behält ihn für sich, ohne dass Alice oder Bob dies bemerken.",
    "slide4Item3": "Eve wählt ihre erste Geheimzahl e1.",
    "slide4Item4": "Eve generiert ihren öffentlichen Schlüssel EA mit Hilfe der Formel, die auf dem Bildschirm angezeigt wird.",
    "slide4Item5": "Nun teilt Eve ihren öffentlichen Schlüssel EA mit Alice. Alice denkt, dass dieser öffentliche Schlüssel von Bob kommt.",
    "slide4Item6": "Nun generieren Alice und Eve den geheimen Schlüssel S1 mit Hilfe der auf dem Bildschirm angezeigten Formeln.",
    "slide4Item7": "Bob wählt seine Geheimzahl b.",
    "slide4Item8": "Bob generiert seinen öffentlichen Schlüssel B mit Hilfe der Formel, die auf dem Bildschirm angezeigt wird.",
    "slide4Item9": "Nun will Bob seinen öffentlichen Schlüssel B mit Alice teilen. Eve blockiert die Übertragung von Bobs öffentlichem Schlüssel und behält ihn für sich, ohne dass Alice oder Bob dies bemerken.",
    "slide4Item10": "Eve wählt ihre zweite Geheimzahl e2.",
    "slide4Item11": "Eve generiert ihren öffentlichen Schlüssel EB mit Hilfe der Formel, die auf dem Bildschirm angezeigt wird.",
    "slide4Item12": "Jetzt teilt Eve ihren öffentlichen Schlüssel EB mit Bob. Bob denkt, dass dieser öffentliche Schlüssel von Alice kommt.",
    "slide4Item13": "Nun generieren Bob und Eve den geheimen Schlüssel S2 mit Hilfe der auf dem Bildschirm angezeigten Formeln.",
    "slide4Item14": "Wenn Eve es schafft, die direkte Kommunikation zwischen Alice und Bob weiterhin zu unterbinden und über sich zu lenken, kann sie die gesamte Kommunikation mitlesen.",
    "slide4Item15": "Nun wird gezeigt, wie ein einfacher DHKE angegriffen werden kann."
}